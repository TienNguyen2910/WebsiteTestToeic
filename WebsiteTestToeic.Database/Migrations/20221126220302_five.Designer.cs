// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebsiteTestToeic.Database.DatabaseContext;

#nullable disable

namespace WebsiteTestToeic.Database.Migrations
{
    [DbContext(typeof(TestToeicDbContext))]
    [Migration("20221126220302_five")]
    partial class five
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Answer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("ContentAnswer")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("IsAnswer")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Question", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("AnswerDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AudioFile")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContentQuestion")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContentScript")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("NumPart")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Quiz", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("TestId");

                    b.ToTable("Quiz", (string)null);
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("EndedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("Result", (string)null);
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.ResultDetail", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int?>("AnswerSelectedId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("ResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerSelectedId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResultId");

                    b.ToTable("ResultDetail", (string)null);
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Role", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Test", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<TimeSpan>("ExamTime")
                        .IsUnicode(false)
                        .HasColumnType("time");

                    b.Property<int?>("NumQuestion")
                        .HasColumnType("int");

                    b.Property<string>("TypeTest")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Test", (string)null);
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("DateOfBirth")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Answer", b =>
                {
                    b.HasOne("WebsiteTestToeic.Domain.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__Answer_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Question", b =>
                {
                    b.HasOne("WebsiteTestToeic.Domain.Models.Quiz", "Quiz")
                        .WithMany("QuestionsList")
                        .HasForeignKey("QuizId")
                        .HasConstraintName("FK__Question_Quiz");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Quiz", b =>
                {
                    b.HasOne("WebsiteTestToeic.Domain.Models.User", "User")
                        .WithMany("QuizzesList")
                        .HasForeignKey("ActorId")
                        .HasConstraintName("FK__Quiz_User");

                    b.HasOne("WebsiteTestToeic.Domain.Models.Test", "Test")
                        .WithMany("QuizzesList")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK__Quiz_Test");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Result", b =>
                {
                    b.HasOne("WebsiteTestToeic.Domain.Models.Quiz", "Quiz")
                        .WithMany("ResultsLists")
                        .HasForeignKey("QuizId")
                        .HasConstraintName("FK__Result_Quiz");

                    b.HasOne("WebsiteTestToeic.Domain.Models.User", "User")
                        .WithMany("ResultsList")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Result_User");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.ResultDetail", b =>
                {
                    b.HasOne("WebsiteTestToeic.Domain.Models.Answer", "Answer")
                        .WithMany("ResultDetailsList")
                        .HasForeignKey("AnswerSelectedId")
                        .HasConstraintName("FK__ResultDetail_Answer");

                    b.HasOne("WebsiteTestToeic.Domain.Models.Question", "Question")
                        .WithMany("ResultDetailsList")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__ResultDetail_Question");

                    b.HasOne("WebsiteTestToeic.Domain.Models.Result", "Result")
                        .WithMany("ResultDetailsList")
                        .HasForeignKey("ResultId")
                        .HasConstraintName("FK__ResultDetail_Result");

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.User", b =>
                {
                    b.HasOne("WebsiteTestToeic.Domain.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Answer", b =>
                {
                    b.Navigation("ResultDetailsList");
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("ResultDetailsList");
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Quiz", b =>
                {
                    b.Navigation("QuestionsList");

                    b.Navigation("ResultsLists");
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Result", b =>
                {
                    b.Navigation("ResultDetailsList");
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.Test", b =>
                {
                    b.Navigation("QuizzesList");
                });

            modelBuilder.Entity("WebsiteTestToeic.Domain.Models.User", b =>
                {
                    b.Navigation("QuizzesList");

                    b.Navigation("ResultsList");
                });
#pragma warning restore 612, 618
        }
    }
}
